#lang sicp

(define (filter precidate sequence)
  (cond ((null? sequence) nil)
        ((precidate (car sequence))
         (cons (car sequence)
               (filter precidate (cdr sequence))))
        (else (filter precidate (cdr sequence)))))

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (map proc sequence)
  (if (null? sequence)
      nil
      (cons (proc (car sequence)) (map proc (cdr sequence)))))

(define (map p sequence) (accumulate (lambda(x y) ( cons((p x) y) )) nil sequence))
(define (append seq1 seq2) (accumulate cons seq2 seq1))
;; 这个看了答案
(define (length sequence) (accumulate (lambda(x y) (+ 1 y)) 0 sequence))