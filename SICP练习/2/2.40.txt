#lang sicp

;; lib
(define (filter precidate sequence)
  (cond ((null? sequence) nil)
        ((precidate (car sequence))
         (cons (car sequence)
               (filter precidate (cdr sequence))))
        (else (filter precidate (cdr sequence)))))

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (map proc sequence)
  (if (null? sequence)
      nil
      (cons (proc (car sequence)) (map proc (cdr sequence)))))


;; proc
(accumulate append
            nil
            (map (lambda (i)
                   (map (lambda(j) (list i j))
                        (enumerate-interval 1 (- i 1))))
                 (enumerate-interval 1 n)))

(define (flatmap proc seq)
  (accumulate append nil (map proc seq)))

(define (prime-sum? pair)
  (prime? (+ (car pair) (cadr pair))))

(define (make-pair-sum pair)
  (list (car pair) (cadr pair) (+ (car pair) (cadr pair))))

(define (prime-sum-pairs n)
  (map make-pair-sum
       (filter prime-sum?
               (flatmap
                (lambda(i)
                  (map (lambda(j) (list i j)) (enumerate-interval 1 (- i 1))))
                (enumerate-interval 1 n)))))

(define (permutations s)
  (if (null? s)
      (list nil)
      (flatmap (lambda(x)
                 (map (lambda(p) (cons x p))
                      (permutations (remove x s))))
               s)))


(define (remove item sequence)
  (filter (lambda (x) (not (= x item)))
          sequence))

(define (prime-sum-pairs n)
  (map make-pair-sum
       (flatmap
                (lambda(i)
                  (map (lambda(j) (list i j)) (enumerate-interval 1 (- i 1))))
                (enumerate-interval 1 n))))

(define (make-pair pair)
  (list (car pair) (cadr pair))

(define (unique-pairs n)
    (flatmap (lambda (i)
                 (map (lambda (j) (list i j))
                      (enumerate-interval 1 (- i 1))))
             (enumerate-interval 1 n)))