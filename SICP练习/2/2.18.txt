#lang sicp

(define (reverse lst)
    (iter lst '()))

(define (iter remained-items result)
    (if (null? remained-items)
        result
        (iter (cdr remained-items)
              (cons (car remained-items) result))))

(define lst (list 1 2 3 4 5))
(define (eq-list lst1 lst2)
  (cond ((and (null? lst1) (null? lst2)) 1)
        ((null? lst1) 0)
        ((null? lst2) 0)
        ((= (car lst1) (car lst2)) 1)
        (eq-list (cdr lst1) (cdr lst2))))

(define correct (list 5 4 3 2 1))
(= (eq-list (reverse lst) correct) 1)